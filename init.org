#+PROPERTY: header-args :tangle yes
#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
#+END_SRC
* Overview

This is an emacs configuration written as Org file(s). Literate configs are a side of literate programming (https://en.wikipedia.org/wiki/Literate_programming) where configuration is written in a file along with its documentation. From this literate configuration file, configs applied are subject to be extracted into a "runnable" file (in this case into init.el), this process is called "tangling" (important Org functions for this are org-babel-tangle and org-babel-tangle-file, see: https://orgmode.org/manual/Extracting-source-code.html for more info on the subject).

Additionally, this emacs configuration is also byte-compiled. Here (http://emacsredux.com/blog/2013/06/25/boost-performance-by-leveraging-byte-compilation/) Bozhidar Batsov explains what is byte compilation and why to do it (i.e.: performance), although mentions that it is pretty much useless to compile non-computationally intensive configs (defuns), I do it "for science".

#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
	       (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

;; Let's tangle it ever time we save it to not have stale configs
(add-hook 'after-save-hook 'tangle-init)
#+END_SRC

Secrets are kept under "zecrets.el".

#+BEGIN_SRC emacs-lisp
(add-hook
 'after-init-hook
 (lambda ()
   (let ((zecrets-file (concat user-emacs-directory "zecrets.el")))
     (when (file-exists-p zecrets-file)
       (load-file zecrets-file)))))
#+END_SRC

Use `package` for managing Emacs packages. `cl` is used along the compilation and it is required `with-no-warnings` in here because of what it is explained here: https://stackoverflow.com/a/13832070

#+BEGIN_SRC emacs-lisp
(eval-when-compile (require 'cl))
(require 'package)
#+END_SRC

Use melpa as the only package repository.

#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
#+END_SRC


* Packages

Let's install some packages here.

#+BEGIN_SRC emacs-lisp
(let* ((package--builtins nil)
       (packages
	'(auto-compile         ; automatically compile Emacs Lisp libraries
	  company              ; Modular text completion framework
	  focus                ; Dim color of text in surrounding sections
	  jedi                 ; Python auto-completion for Emacs
	  js2-mode             ; Improved JavaScript editing mode
	  magit                ; control Git from Emacs
	  markdown-mode        ; Emacs Major mode for Markdown-formatted files
	  org                  ; Outline-based notes management and organizer
	  try                  ; Try out Emacs packages
	  monokai-theme        ; My favourite emacs theme
	  enh-ruby-mode	       ; Ruby dev
	  rvm		       ; Ruby dev
	  exec-path-from-shell ; Ruby dev
	  which-key)))         ; Display available keybindings in popup
  (ignore-errors ; Packages on Mac OS X.
    (when (memq window-system '(mac ns))
      (push 'exec-path-from-shell packages)
      (push 'reveal-in-osx-finder packages))
    (let ((packages (remove-if 'package-installed-p packages)))
      (when packages
	;; Install uninstalled packages
        (package-refresh-contents)
	(mapc 'package-install packages)))))
#+END_SRC

Few automodes to be loaded in case of coming across one of the listed file extensions.

#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist
      (append '(
		("\\.rb$" . enh-ruby-mode)
		("\\.rake$" . enh-ruby-mode)
		("\\.ru$" . enh-ruby-mode)
		("\\Rakefile$" . enh-ruby-mode)
		("\\Capfile$" . enh-ruby-mode)
		("\\spec.rb$" . enh-ruby-mode)
		("\\.gemspec$" . enh-ruby-mode)
		("\\.yaml$" . yaml-mode)
		("\\.yml$" . yaml-mode)
		("\\.sql$" . sql-mode)
		("\\.pp$" . puppet-mode)
		("\\.js$" . js-mode)
		("\\.dot$" . dot-mode)
		("\\.go$" . go-mode)
		("\\.groovy$" . groovy-mode)
		("\\.txt$" . text-mode)
		("\\.feature$" . cucumber-mode)
		("\\.el$" . lisp-mode)
		("\\.html$" . web-mode)
		("\\.css$" . css-mode)
		("\\.*nginx.*\.conf$" . nginx-mode)
		("\\.conf$" . conf-mode)
		("\\TODO$" . org-mode)
		("\\.org$". org-mode)
		("\\.md$" . markdown-mode)
		("\\.MD$" . markdown-mode)
		("\\.markdown$" . markdown-mode))
	      auto-mode-alist))
#+END_SRC


* Behaviour

Some misc behavioural changes (backups, startup, yes-no questions, etc) 
It also disables lock files, it is messy on mounted network file systems like Keybase FS (https://keybase.io/)

#+BEGIN_SRC emacs-lisp
(setq backup-by-copying t
      backup-directory-alist '(("." . "~/.emacs.d/backup/"))
      delete-old-versions t
      kept-new-versions 3
      kept-old-versions 2
      version-control t
      inhibit-startup-screen t
      initial-scratch-message "ಠ_ಠ\n"
      create-lockfiles nil
      confirm-nonexistent-file-or-buffer nil
      vc-follow-symlinks t
      visible-bell t
      confirm-nonexistent-file-or-buffer nil) ; remove confirm dialog on new buffers
(global-auto-revert-mode 1) ; reload files when change, please
#+END_SRC

The below are some OS X-related tweaks (enabling {}, switching meta, etc) 

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (setq ns-pop-up-frames nil
        mac-option-modifier nil
        mac-command-modifier 'meta
        select-enable-clipboard t)
  (exec-path-from-shell-initialize)
  (when (fboundp 'mac-auto-operator-composition-mode)
    (mac-auto-operator-composition-mode 1)))
#+END_SRC

** Appearance

I usually work with emacs GUI, but I dislike scrolls. I also like good ol' Cmd-c, Cmd-x, etc. (enabled CUA mode: https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html)

#+BEGIN_SRC emacs-lisp
(cua-mode t)
(custom-set-variables
 '(exec-path-from-shell-check-startup-files nil)
 '(scroll-bar-mode nil)
 '(tool-bar-mode nil)
 '(show-paren-mode t)
 '(show-paren-delay 0)
 '(global-company-mode t))
#+END_SRC

Use monokai theme for Emacs.

#+BEGIN_SRC emacs-lisp
(load-theme 'monokai t)
#+END_SRC

UTF-8 everywhere, because it is the standard

#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
#+END_SRC
