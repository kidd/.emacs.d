#+PROPERTY: header-args :tangle yes
#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
#+END_SRC
* Overview

This is an emacs configuration written as Org file(s). Literate configs are a side of literate programming (https://en.wikipedia.org/wiki/Literate_programming) where configuration is written in a file along with its documentation. From this literate configuration file, configs applied are subject to be extracted into a "runnable" file (in this case into init.el), this process is called "tangling" (important Org functions for this are org-babel-tangle and org-babel-tangle-file, see: https://orgmode.org/manual/Extracting-source-code.html for more info on the subject).

Additionally, this emacs configuration is also byte-compiled. Here (http://emacsredux.com/blog/2013/06/25/boost-performance-by-leveraging-byte-compilation/) Bozhidar Batsov explains what is byte compilation and why to do it (i.e.: performance), although mentions that it is pretty much useless to compile non-computationally intensive configs (defuns), I do it "for science".

#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
	       (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

;; Let's tangle it ever time we save it to not have stale configs
(add-hook 'after-save-hook 'tangle-init)
#+END_SRC


Use `package` for managing Emacs packages. `cl` is used along the compilation and it is required `eval-when-compile` as explained here: https://stackoverflow.com/a/13832070

#+BEGIN_SRC emacs-lisp
(eval-when-compile (require 'cl))
(require 'package)
#+END_SRC

Use melpa as the only package repository.

#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
#+END_SRC


* Packages

Let's install some packages here.

#+BEGIN_SRC emacs-lisp
(let* ((package--builtins nil)
  (packages
  '(auto-compile         ; automatically compile Emacs Lisp libraries
    company              ; Modular text completion framework
    focus                ; Dim color of text in surrounding sections
    jedi                 ; Python auto-completion for Emacs
    js2-mode             ; Improved JavaScript editing mode
    magit                ; control Git from Emacs
    markdown-mode        ; Emacs Major mode for Markdown-formatted files
    org                  ; Outline-based notes management and organizer
    try                  ; Try out Emacs packages
    monokai-theme        ; My favourite emacs theme
    enh-ruby-mode	 ; Ruby dev
    rvm		         ; Ruby dev
    which-key            ; Display available keybindings in popup
    multi-term           ; Better terminal emulation
    ace-window           ; Cycle through frames
    go-eldoc             ; Go dev
    go-add-tags          ; Go dev
    company-go           ; Go dev
    go-mode              ; Go dev
    )))
  (ignore-errors ; Packages on Mac OS X.
    (when (memq window-system '(mac ns))
      (push 'exec-path-from-shell packages)
      (push 'reveal-in-osx-finder packages))
    (let ((packages (remove-if 'package-installed-p packages)))
      (when packages
	;; Install uninstalled packages
        (package-refresh-contents)
	(mapc 'package-install packages)))))
#+END_SRC

The below are some OS X-related tweaks (enabling {}, switching meta, etc).

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (setq ns-pop-up-frames nil
        mac-option-modifier nil
        mac-command-modifier 'meta
        select-enable-clipboard t)
  (exec-path-from-shell-initialize)
  (when (fboundp 'mac-auto-operator-composition-mode)
    (mac-auto-operator-composition-mode 1)))
#+END_SRC

Few automodes to be loaded in case of coming across one of the listed file extensions.

#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist
      (append '(
		("\\.rb$" . enh-ruby-mode)
		("\\.rake$" . enh-ruby-mode)
		("\\.ru$" . enh-ruby-mode)
		("\\Rakefile$" . enh-ruby-mode)
		("\\Capfile$" . enh-ruby-mode)
		("\\spec.rb$" . enh-ruby-mode)
		("\\.gemspec$" . enh-ruby-mode)
		("\\.yaml$" . yaml-mode)
		("\\.yml$" . yaml-mode)
		("\\.sql$" . sql-mode)
		("\\.pp$" . puppet-mode)
		("\\.js$" . js-mode)
		("\\.dot$" . dot-mode)
		("\\.go$" . go-mode)
		("\\.groovy$" . groovy-mode)
		("\\.txt$" . text-mode)
		("\\.feature$" . cucumber-mode)
		("\\.el$" . lisp-mode)
		("\\.html$" . web-mode)
		("\\.css$" . css-mode)
		("\\.*nginx.*\.conf$" . nginx-mode)
		("\\.conf$" . conf-mode)
		("\\TODO$" . org-mode)
		("\\.org$". org-mode)
		("\\.md$" . markdown-mode)
		("\\.MD$" . markdown-mode)
		("\\.markdown$" . markdown-mode)
                ("\\.sh$" . sh-mode))
	      auto-mode-alist))
#+END_SRC


* Behaviour & appearance

** Misc

Some misc behavioural changes (backups, startup, etc).
It also disables lock files, it is messy on mounted network file systems like Keybase FS (https://keybase.io/).

#+BEGIN_SRC emacs-lisp
(setq backup-by-copying t
      backup-directory-alist '((".*" . "~/.emacs.d/backup/"))
      auto-save-file-name-transforms '((".*" . "~/.emacs.d/backup/"))
      delete-old-versions t
      kept-new-versions 3
      kept-old-versions 2
      version-control t
      inhibit-startup-screen t
      initial-scratch-message "ಠ_ಠ\n"
      create-lockfiles nil
      confirm-nonexistent-file-or-buffer nil
      vc-follow-symlinks t
      visible-bell t
      confirm-nonexistent-file-or-buffer nil         ; Remove confirm dialog on new buffers
      exec-path-from-shell-check-startup-files nil
      show-paren-delay 0                             ; No delay when showing matching parenthesis.
      tramp-default-method "ssh"
      tramp-verbose 10
      epa-file-inhibit-auto-save t                   ; Disable auto-save for encrypted files
      )
#+END_SRC

Set multi-term to use ZSH. And configure "paste".

#+BEGIN_SRC emacs-lisp
(setq multi-term-program "/usr/local/bin/zsh")
(add-hook 'term-mode-hook (lambda ()
(define-key term-raw-map (kbd "C-c C-y") 'term-paste)))
#+END_SRC

Tramp mode is used to access other machines. The below enables tramp mode and provides auto-complete of hosts from ssh config.

#+BEGIN_SRC emacs-lisp
(require 'tramp)

(tramp-set-completion-function "ssh"
  '((tramp-parse-sconfig "/etc/ssh_config")
    (tramp-parse-sconfig "~/.ssh/config")))
(put 'dired-find-alternate-file 'disabled t)
#+END_SRC


** Modes
#+BEGIN_SRC emacs-lisp
(dolist (mode
  '(global-company-mode          ; Auto-completion everywhere
    global-prettify-symbols-mode ; Greek letters should look greek
    global-auto-revert-mode      ; Reload files when change, please
    show-paren-mode              ; Highlight matching parentheses
    which-key-mode               ; Available keybindings in popup
    cua-mode                     ; Global Cmd-c, Cmd-x to copy & paste
    global-display-line-numbers-mode    ; Native line numbers
    ))
  (funcall mode 1))

(dolist (mode
  '(scroll-bar-mode  ; No scroll bar
    tool-bar-mode    ; No toolbar
    ))
  (funcall mode -1))
#+END_SRC

Yes or no -> y-or-n

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)

#+END_SRC


** Theme
Use monokai theme for Emacs.

#+BEGIN_SRC emacs-lisp
(load-theme 'monokai t)
#+END_SRC

UTF-8 everywhere, because it is the standard

#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
#+END_SRC



** Completion
#+BEGIN_SRC emacs-lisp
(setq company-idle-delay 0
      company-echo-delay 0
      company-dabbrev-downcase nil
      company-minimum-prefix-length 2
      company-selection-wrap-around t
      company-transformers '(company-sort-by-occurrence
                             company-sort-by-backend-importance))

#+END_SRC


* Key bindings

Text sizing. Use `C-x C-0` to restore font size.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)        ; Bigger
(global-set-key (kbd "C--") 'text-scale-decrease)        ; Smaller
(global-set-key (kbd "C-x C-b") 'ibuffer)                ; Open ibuffer manager
(global-set-key (kbd "C-c n") 'org-capture)              ; Org capture
(global-set-key (kbd "M-n") 'next-multiframe-window)     ; Cycle through frames
(global-set-key (kbd "M-p") 'previous-multiframe-window) ; Cycle through frames
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "M-o") 'ace-window)                  ; Cycles through frames
#+END_SRC

Handle frame switching on a terminal frame (due to need to escape meta)

#+BEGIN_SRC emacs-lisp
(add-hook 'multi-term-mode-hook (lambda ()
                                  (define-key term-raw-map (kbd "M-o") 'ace-window)))
#+END_SRC


* Encryption

EasyPG is used for encryption. More info ([[https://www.emacswiki.org/emacs/EasyPG]])
#+BEGIN_SRC emacs-lisp
(require 'epa-file)
#+END_SRC


* Org

** Misc

Some defaults and custom variables follow.

#+BEGIN_SRC emacs-lisp
(setq org-support-shift-select t                                           ; Enables Shift + arrows to select a region
      calendar-date-style (quote european)
      calendar-latitude 60.1                                               ; Roughly Helsinki
      calendar-longitude 24.9                                              ; Roughly Helsinki
      calendar-week-start-day 1                                            ; Weeks start on Monday
      calendar-today-visible-hook (quote (calendar-mark-today))
      org-journal-date-format "%A, %d.%m.%Y"
      org-journal-dir "/keybase/private/spavi/org/diary/"
      org-log-done t
      org-directory "/keybase/private/spavi/org/"
      org-default-notes-file "/keybase/private/spavi/org/refile.org.gpg"
      org-tag-alist
      '((:startgroup)                                                     ; Tag lists
        ("@w0rk" . ?w)
        ("@home" . ?h)
        (:endgroup)
        ("PERSONAL" . ?p)
        ("NOTE" . ?n))
      org-fast-tag-selection-include-todo t
      org-use-fast-todo-selection t
      org-todo-keywords
      '((sequence "TODO(t)" "PROGRESSING(p)" "|" "DONE(d)")
	(sequence "WAITING(w@/!)" "INACTIVE(i@/!)" "|" "CANCELLED(c@/!)")) ; Keywords
      org-todo-keyword-faces
      '(("TODO" :foreground "red" :weight bold)
	("PROGRESSING" :foreground "blue" :weight bold)
	("DONE" :foreground "forest green" :weight bold)
	("WAITING" :foreground "orange" :weight bold)
	("INACTIVE" :foreground "magenta" :weight bold)
	("CANCELLED" :foreground "brown" :weight bold))                    ; Colors for keywords
	org-todo-state-tags-triggers
	'(("CANCELLED" ("CANCELLED" . t))
	("WAITING" ("WAITING" . t))
	("INACTIVE" ("WAITING") ("INACTIVE" . t))
	("PROGRESSING" ("PROGRESSING" . t))
	(done ("WAITING") ("INACTIVE") ("PROGRESSING") )
	("TODO" ("WAITING") ("CANCELLED") ("INACTIVE") ("PROGRESSING"))
	("DONE" ("WAITING") ("CANCELLED") ("INACTIVE"))
	("PROGRESSING" ("WAITING") ("CANCELLED") ("INACTIVE")))            ; Auto-update tags whenever the state has changed
	org-refile-targets '((nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 9))
        org-refile-use-outline-path t                                      ; Use full outline paths for refile targets
        org-outline-path-complete-in-steps nil
        org-completion-use-ido t
        ido-everywhere t
        ido-max-directory-size 100000
	ido-default-file-method 'selected-window
        ido-default-buffer-method 'selected-window
	org-indirect-buffer-display 'current-window
	)
(ido-mode (quote both))
#+END_SRC

Org template custom configurations

#+BEGIN_SRC emacs-lisp
(defvar org-capture-templates
  '(
    ("t" "To-do task." 
     entry 
     (file+headline org-default-notes-file "Tasks")
     "* TODO %?\n%u\n%a\n" :clock-in t :clock-resume t)
    ("w" "Work task." 
     entry 
     (file+headline org-default-notes-file "Work Task")
     "* TODO %?\n%u\n%a\n" 
     :clock-in t 
     :clock-resume t)
    ("a" "Apointment" 
     entry 
     (file "/keybase/private/spavi/org/schedule.org.gpg") 
     (file "~/.emacs.d/org-templates/events.orgcaptmpl")
     :empty-lines-before 1)
    ("l" "Link: Something interesting?"
     entry
     (file+headline org-default-notes-file "Links")
     (file "~/.emacs.d/org-templates/links.orgcaptmpl"))
    ("j" "Journal daily." 
     entry 
     (file (expand-file-name (format-time-string "%Y%m%d") org-journal-dir))
     "*%(sp/my-timestamp)\n\n**%(format-time-string \"%H:%M\")%?" 
     :kill-buffer t)
    ("i" "Idea came up." 
     entry 
     (file org-default-notes-file)
     "* %? :IDEA: \n%u" :clock-in t :clock-resume t)))
#+END_SRC

Hack to work around %A having different meaning for capture mode vs. format-time-string

#+BEGIN_SRC emacs-lisp
(defun sp/my-timestamp ()
  (format-time-string "%A, %d.%m.%Y"))
#+END_SRC

Automatic text width for org-mode documents

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'auto-fill-mode)
(add-hook 'org-journal-mode-hook 'auto-fill-mode)
#+END_SRC

Org agenda files
#+BEGIN_SRC emacs-lisp
(load-library "find-lisp")
(setq org-agenda-files
   (find-lisp-find-files "/keybase/private/spavi/org" "\.org.gpg$"))

#+END_SRC


* Programming

Some defaults for some languages I use.

** Go

#+BEGIN_SRC emacs-lisp
(add-hook 'go-mode-hook 'go-eldoc-setup)
(add-hook 'before-save-hook #'gofmt-before-save)
(add-hook 'go-mode-hook 'flycheck-mode)
(add-hook 'go-mode-hook 'dumb-jump-mode)
(add-hook 'go-mode-hook 'company-mode)
(add-hook 'go-mode-hook (lambda ()
 (set (make-local-variable 'company-backends) '(company-go))
 (company-mode)))
#+END_SRC

